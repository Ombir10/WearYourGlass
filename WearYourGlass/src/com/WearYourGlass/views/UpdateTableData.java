/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.WearYourGlass.views;

import com.WearYourGlass.models.*;
import com.WearYourGlass.views.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author raiom
 */
public class UpdateTableData extends javax.swing.JFrame {

    /**
     * Creates new form UpdateTableData
     */
    private final WearYourGlass newData;
    private UpdateTableData updateFrame;
    
    
    public UpdateTableData(WearYourGlass data) {
        initComponents();
        this.newData = data;
        
        setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlUpdate = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUpdateBrands = new javax.swing.JTextField();
        txtUpdateMaterials = new javax.swing.JTextField();
        txtUpdateSize = new javax.swing.JTextField();
        txtUpdatePrice = new javax.swing.JTextField();
        txtUpdateColor = new javax.swing.JTextField();
        txtUpdateGender = new javax.swing.JTextField();
        lblBrands = new javax.swing.JLabel();
        lblMaterials = new javax.swing.JLabel();
        lblFrameSize = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblColor = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUpdatedPower = new javax.swing.JTextField();
        lblGender1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please insert data for all the textfield ");

        txtUpdateBrands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateBrandsActionPerformed(evt);
            }
        });

        txtUpdateMaterials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateMaterialsActionPerformed(evt);
            }
        });

        txtUpdateSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateSizeActionPerformed(evt);
            }
        });

        txtUpdatePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdatePriceActionPerformed(evt);
            }
        });

        txtUpdateColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateColorActionPerformed(evt);
            }
        });

        txtUpdateGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateGenderActionPerformed(evt);
            }
        });

        lblBrands.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblBrands.setText("Brands");

        lblMaterials.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblMaterials.setText("Materials");

        lblFrameSize.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblFrameSize.setText("Frame Size");

        lblPrice.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblPrice.setText("Price(in Rs)");

        lblColor.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblColor.setText("Frame Color");

        lblGender.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblGender.setText("Gender");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Start Power");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("End Power");

        txtUpdatedPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdatedPowerActionPerformed(evt);
            }
        });

        lblGender1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblGender1.setText("Supported Power");

        javax.swing.GroupLayout pnlUpdateLayout = new javax.swing.GroupLayout(pnlUpdate);
        pnlUpdate.setLayout(pnlUpdateLayout);
        pnlUpdateLayout.setHorizontalGroup(
            pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(pnlUpdateLayout.createSequentialGroup()
                        .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFrameSize, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaterials, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBrands, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblGender1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlUpdateLayout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlUpdateLayout.createSequentialGroup()
                                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUpdatePrice)
                                    .addComponent(txtUpdateSize)
                                    .addComponent(txtUpdateMaterials)
                                    .addComponent(txtUpdateBrands)
                                    .addComponent(txtUpdateColor)
                                    .addComponent(txtUpdateGender))
                                .addGap(28, 28, 28))
                            .addGroup(pnlUpdateLayout.createSequentialGroup()
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlUpdateLayout.createSequentialGroup()
                                .addComponent(txtUpdatedPower)
                                .addContainerGap())))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUpdateLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        pnlUpdateLayout.setVerticalGroup(
            pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateBrands, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBrands, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateMaterials, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaterials, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateSize, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFrameSize, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateColor, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateGender, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlUpdateLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdatedPower, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUpdateBrandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateBrandsActionPerformed
        // TODO add your handling code here:
        isBrandExists();
    }//GEN-LAST:event_txtUpdateBrandsActionPerformed

    private void txtUpdateMaterialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateMaterialsActionPerformed
        // TODO add your handling code here:
        String materials = txtUpdateMaterials.getText().trim();
        if (materials.isEmpty()) {
            // materials field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field of materials.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!materials.matches("^[a-zA-Z]+(\\s[a-zA-Z]+)*$")) {
                // materials field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the correct materials of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
    }//GEN-LAST:event_txtUpdateMaterialsActionPerformed

    private void txtUpdatePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdatePriceActionPerformed
        // TODO add your handling code here:
        String priceInRs = txtUpdatePrice.getText();
        if (priceInRs.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the price of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!priceInRs.matches("^[1-9][0-9]*$") || Integer.parseInt(priceInRs)<700) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "The price of the glass is not accurate.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
    }//GEN-LAST:event_txtUpdatePriceActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        UpdateValidation();
            String frame_size = txtUpdateSize.getText().trim();
            String materials = txtUpdateMaterials.getText().trim();
            String priceInRs = txtUpdatePrice.getText();
            String frame_color = txtUpdateColor.getText();
            String gender = txtUpdateGender.getText();
            String brand_name = txtUpdateBrands.getText().trim();
            String supported_power = txtUpdatedPower.getText();
//            int row = -1;
//            WearYourGlassModel obj = null;
//            for(int i = 0; i<newData.getGlassDataList().size();i++){
//                obj = newData.getGlassDataList().get(i);
//                row = i;
//            }
            
            int selectedRow = newData.getSortedTable().getSelectedRow();
            if (selectedRow != -1){
                
//                obj.updateWearYourGlassModel(isBrandExists(), materials, frame_size, ERROR, supported_power, frame_color, gender);
//                newData.getGlassDataList().set(row, obj);
                newData.setUpdatedData(isBrandExists(),materials,frame_size,priceInRs,supported_power,frame_color,gender);
                newData.updateTable();
                JOptionPane.showMessageDialog(this, "Data added successfully");
            }
    }//GEN-LAST:event_btnOKActionPerformed

    
    private void txtUpdatedPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdatedPowerActionPerformed
        // TODO add your handling code here:
        rangeOfPower();
    }//GEN-LAST:event_txtUpdatedPowerActionPerformed

    private void txtUpdateSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateSizeActionPerformed
        // TODO add your handling code here:
        String frame_size = txtUpdateSize.getText().trim();
        if (frame_size.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame Size.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            /**if (!frame_size.matches("^[a-zA-Z]+([ ,]+[a-zA-Z]+)*$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the correct size of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;**/
            //}
    }//GEN-LAST:event_txtUpdateSizeActionPerformed

    private void txtUpdateColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateColorActionPerformed
        // TODO add your handling code here:
                String frame_color = txtUpdateColor.getText();    
        if (frame_color.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame color.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!frame_color.matches("^[a-zA-Z]+([ ,]+[a-zA-Z]+)*$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the available color of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
    }//GEN-LAST:event_txtUpdateColorActionPerformed

    private void txtUpdateGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateGenderActionPerformed
        // TODO add your handling code here:
        String gender = txtUpdateGender.getText();
        if (gender.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame color.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!gender.matches("^[a-zA-Z]+$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the available color of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
    }//GEN-LAST:event_txtUpdateGenderActionPerformed
    
    public void setValues(String brands, String materials, String size, String price,String power, String color, String gender){
        txtUpdateBrands.setText(brands);
        txtUpdateMaterials.setText(materials);
        txtUpdateSize.setText(size);
        txtUpdatePrice.setText(price);
        txtUpdatedPower.setText(power);
        txtUpdateColor.setText(color);
        txtUpdateGender.setText(gender);
    }
    
    public String isBrandExists(){
        WearYourGlass glassData = new WearYourGlass();
        glassData.getAllDataFromTable();
        String brand_name = txtUpdateBrands.getText().trim();
            
                if(brand_name.isEmpty()){
                    // Brands field is empty, show an error message or handle accordingly
                    JOptionPane.showMessageDialog(this, "Please fill the name of Brand .", "Error", JOptionPane.ERROR_MESSAGE);
                    
                }else if (!brand_name.matches("^[a-zA-Z]+(\\s[a-zA-Z]+)*$")) {
                // Brands field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Brand already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                
            }
        return brand_name;
    }
    
    public void rangeOfPower(){
        int start_power;
        int end_power;
        String supported_power;
        
        start_power = (int) jSpinner1.getValue();
        end_power = (int) jSpinner2.getValue();
        /**if(end_power == 0){
            JOptionPane.showMessageDialog(this, "End power should not be 0.", "Error", JOptionPane.ERROR_MESSAGE);
        }else **/
        //}
        supported_power = start_power +""+"to"+""+end_power;
        txtUpdatedPower.setText(supported_power);
        //}
    } 
    public void UpdateValidation(){
        String materials = txtUpdateMaterials.getText().trim();
        String frame_size = txtUpdateSize.getText().trim();
        String priceInRs = txtUpdatePrice.getText();
        String frame_color = txtUpdateColor.getText();
        String supported_power = txtUpdatedPower.getText();
        String gender = txtUpdateGender.getText();
        isBrandExists();
        // Check for special characters in Brands field
        if (materials.isEmpty()) {
            // materials field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field of materials.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!materials.matches("^[a-zA-Z]+(\\s[a-zA-Z]+)*$")) {
                // materials field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the correct materials of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (frame_size.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame Size.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            /**if (!frame_size.matches("^[a-zA-Z]+$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the correct size of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }**/
        if (frame_color.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame color.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!frame_color.matches("^^[a-zA-Z]+([ ,]+[a-zA-Z]+)*$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the available color of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        if (gender.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please fill the field for Frame color.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!gender.matches("^[a-zA-Z]+$")) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the available color of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        if (priceInRs.isEmpty()) {
            // frame_size field is empty, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "Please provide the price of the glass.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Check for special characters in materials field
            if (!priceInRs.matches("^[1-9][0-9]*$") || Integer.parseInt(priceInRs)<700) {
                // frame_size field contains special characters, show an error message or handle accordingly
                JOptionPane.showMessageDialog(this, "The price of the glass is not accurate.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rangeOfPower();
            
            WearYourGlassModel updatedData = new WearYourGlassModel(isBrandExists(), materials, frame_size, Integer.parseInt(priceInRs), frame_color, supported_power, gender);
//            newData.getGlassDataList();
//            newData.updateTable();    
    }     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateTableData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateTableData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateTableData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateTableData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateTableData(new WearYourGlass()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JLabel lblBrands;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblFrameSize;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGender1;
    private javax.swing.JLabel lblMaterials;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JPanel pnlUpdate;
    private javax.swing.JTextField txtUpdateBrands;
    private javax.swing.JTextField txtUpdateColor;
    private javax.swing.JTextField txtUpdateGender;
    private javax.swing.JTextField txtUpdateMaterials;
    private javax.swing.JTextField txtUpdatePrice;
    private javax.swing.JTextField txtUpdateSize;
    private javax.swing.JTextField txtUpdatedPower;
    // End of variables declaration//GEN-END:variables
}
